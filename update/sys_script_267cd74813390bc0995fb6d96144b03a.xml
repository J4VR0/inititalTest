<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_pdm_pdr_evaluation_cycle</collection>
        <condition>!current.participant_groups.nil();</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>(PDR) Create related PDRs</name>
        <order>100</order>
        <priority>50</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	//Get all members of eval participant groups
	var workNotes = '';
	var grpSys = current.participant_groups.split(",");

	for(var i=0; i < grpSys.length; i++){
		var grp = new GlideRecord('sys_user_grmember');
		grp.addQuery('group', grpSys[i]);
		grp.query();
		while(grp.next()){

			var message = checkEvaluation(grp.user, current.year);

			if(message != '')
				workNotes += message + '\n';

		}
	}

	if(workNotes != '')
		current.work_notes = workNotes;
	
	current.update();


	function checkEvaluation(employee, year){

		if(!employee.active)
			return employee.getDisplayValue() + ' is inactive, PDR creation skipped';

		var master = new PDRMaster();

		//Verify if employee has an existing PDR on the same year
		var pdr = new GlideRecord('x_pdm_pdr_evaluation');
		pdr.addQuery('employee', employee);
		pdr.addQuery('parent.year', year);
		pdr.query();
		if(!pdr.hasNext()){
			master.createEvaluation(employee, current.sys_id);
			return '';
		}else
			return	employee.getDisplayValue() + ' already has an evaluation in ' + year + ', PDR creation skipped to avoid duplicates';
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>jonathanv_adm</sys_created_by>
        <sys_created_on>2017-10-09 18:12:04</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>267cd74813390bc0995fb6d96144b03a</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>(PDR) Create related PDRs</sys_name>
        <sys_overrides/>
        <sys_package display_value="Performance &amp; Development Review" source="x_pdm_pdr">5c227acc13b50bc0995fb6d96144b0f9</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Performance &amp; Development Review">5c227acc13b50bc0995fb6d96144b0f9</sys_scope>
        <sys_update_name>sys_script_267cd74813390bc0995fb6d96144b03a</sys_update_name>
        <sys_updated_by>jonathanv_adm</sys_updated_by>
        <sys_updated_on>2018-08-28 05:26:32</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=267cd74813390bc0995fb6d96144b03a"/>
</record_update>
