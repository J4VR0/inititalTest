<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>u_performance_evaluation_parent</collection>
        <condition>!current.u_participant_groups.nil();</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Create related PDRs</name>
        <order>100</order>
        <priority>50</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	//Get all members of eval participant groups
	var str = 'The following employees of participant groups are inactive. No performance evaluation was created for them.' + '\n';
	var cnt = 0;
	var grpSys = current.u_participant_groups.split(",");
	for(var i=0; i < grpSys.length; i++){
		var grp = new GlideRecord('sys_user_grmember');
		grp.addQuery('group', grpSys[i]);
		grp.query();
		while(grp.next()){
			//If user is acitve, proceed with checking previouse year eval
			if(grp.user.active){
				checkPrevEval(grp.user);
			}else{
                str += grp.user.name + '\n';
				cnt++;
            }
		}
	}

    if(cnt > 0)
    current.u_work_notes = str;
    current.update();

	
	function checkPrevEval(employee){
		//Create evaluations if no other evaluation exists for the same year
		
		var pdrCycle = current.getUniqueValue();
		
		var newEval = new GlideRecord('u_performance_evaluation');
		newEval.addQuery('u_employee_name', employee);
		newEval.addQuery('u_parent', pdrCycle);
		newEval.query();
		if(!newEval.next()){
			//Get user attributes
			var gUsr = new GlideRecord('sys_user');
			gUsr.get(employee);
			var usrDept = gUsr.department.sys_id;
			var usrMgr = gUsr.manager.sys_id;
			
			
			//Create new performance evaluation
			newEval.initialize();
			newEval.u_parent = evalYr;
			newEval.u_department = usrDept;
			newEval.u_manager = usrMgr;
			newEval.u_second_level_manager = gUsr.manager.manager;
			newEval.u_employee_name = employee;
			newEval.setValue('u_status','1');
			newEval.u_employee_is_active = 'Yes';
			newEval.insert();
		}

	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>jonathanv_adm</sys_created_by>
        <sys_created_on>2017-10-09 18:12:04</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>267cd74813390bc0995fb6d96144b03a</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>Create related PDRs</sys_name>
        <sys_overrides/>
        <sys_package display_value="Performance &amp; Development Review" source="x_pdm_pdr">5c227acc13b50bc0995fb6d96144b0f9</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Performance &amp; Development Review">5c227acc13b50bc0995fb6d96144b0f9</sys_scope>
        <sys_update_name>sys_script_267cd74813390bc0995fb6d96144b03a</sys_update_name>
        <sys_updated_by>jonathanv_adm</sys_updated_by>
        <sys_updated_on>2017-12-22 19:04:19</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=267cd74813390bc0995fb6d96144b03a"/>
</record_update>
